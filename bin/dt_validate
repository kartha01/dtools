#!/usr/bin/env python

import argparse
import inspect
import os
import sys

import dt_settings

dtlib_path = os.path.realpath(
    os.path.join(os.path.dirname(inspect.getfile(inspect.currentframe())), dt_settings.DTOOLS_LIB_RELATIVE_PATH))
if dtlib_path not in sys.path:
    sys.path.insert(0, dtlib_path)

from dtools_lib import delimited_record

parser = argparse.ArgumentParser()
parser.add_argument('--delimiter', nargs='?', default=dt_settings.DEFAULT_DELIMITER,
                    help='Set the field separator to this (default: {0}'.format(dt_settings.DEFAULT_DELIMITER))
parser.add_argument('--check', action='store_true', help='Only perform the check, do not emit valid records')
args = parser.parse_args()

sep = dt_settings.DEFAULT_DELIMITER
header = sys.stdin.readline().rstrip().split(sep)
num_fields = len(header)
good_recs, bad_recs = 0, 0
if not args.check:
    print sep.join(header)
for rec in delimited_record.read_delimited(sys.stdin, sep):
    if len(rec) != num_fields:
        bad_recs += 1
        dt_settings.logger.warning(
            'Record %d (%d fields expected, actual %d):\n%s', bad_recs + good_recs, num_fields, len(rec), sep.join(rec))
    else:
        good_recs += 1
        if not args.check:
            print sep.join(rec)

if args.check:
    print 'Valid:{0},Invalid:{1}'.format(good_recs, bad_recs)

if bad_recs > 0:
    exit(1)
